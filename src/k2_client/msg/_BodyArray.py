"""autogenerated by genpy from k2_client/BodyArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import k2_client.msg
import geometry_msgs.msg
import std_msgs.msg

class BodyArray(genpy.Message):
  _md5sum = "eb5202664bdf63a70294b15966c92b44"
  _type = "k2_client/BodyArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Body[] bodies
================================================================================
MSG: k2_client/Body
Header header
int32 leanTrackingState
Lean lean
bool isRestricted
bool isTracked
uint64 trackingId
int32 clippedEdges
bool engaged
float32 handRightConfidence
int32 handRightState
float32 handLeftConfidence
int32 handLeftState
Appearance appearance
Activities activities
Expressions expressions
JointOrientationAndType[] jointOrientations
JointPositionAndState[] jointPositions
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: k2_client/Lean
float64 leanX
float64 leanY
================================================================================
MSG: k2_client/Appearance
bool wearingGlasses
================================================================================
MSG: k2_client/Activities
bool eyeLeftClosed
bool eyeRightClosed
bool mouthOpen
bool mouthMoved
bool lookingAway
================================================================================
MSG: k2_client/Expressions
bool neutral
bool happy
================================================================================
MSG: k2_client/JointOrientationAndType
geometry_msgs/Quaternion orientation
int32 jointType
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: k2_client/JointPositionAndState
bool trackingState
geometry_msgs/Point position
int32 jointType
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['bodies']
  _slot_types = ['k2_client/Body[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bodies

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BodyArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bodies is None:
        self.bodies = []
    else:
      self.bodies = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.bodies)
      buff.write(_struct_I.pack(length))
      for val1 in self.bodies:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.leanTrackingState))
        _v3 = val1.lean
        _x = _v3
        buff.write(_struct_2d.pack(_x.leanX, _x.leanY))
        _x = val1
        buff.write(_struct_2BQiBfifi.pack(_x.isRestricted, _x.isTracked, _x.trackingId, _x.clippedEdges, _x.engaged, _x.handRightConfidence, _x.handRightState, _x.handLeftConfidence, _x.handLeftState))
        _v4 = val1.appearance
        buff.write(_struct_B.pack(_v4.wearingGlasses))
        _v5 = val1.activities
        _x = _v5
        buff.write(_struct_5B.pack(_x.eyeLeftClosed, _x.eyeRightClosed, _x.mouthOpen, _x.mouthMoved, _x.lookingAway))
        _v6 = val1.expressions
        _x = _v6
        buff.write(_struct_2B.pack(_x.neutral, _x.happy))
        length = len(val1.jointOrientations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.jointOrientations:
          _v7 = val2.orientation
          _x = _v7
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_i.pack(val2.jointType))
        length = len(val1.jointPositions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.jointPositions:
          buff.write(_struct_B.pack(val2.trackingState))
          _v8 = val2.position
          _x = _v8
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          buff.write(_struct_i.pack(val2.jointType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.bodies is None:
        self.bodies = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bodies = []
      for i in range(0, length):
        val1 = k2_client.msg.Body()
        _v9 = val1.header
        start = end
        end += 4
        (_v9.seq,) = _struct_I.unpack(str[start:end])
        _v10 = _v9.stamp
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v9.frame_id = str[start:end].decode('utf-8')
        else:
          _v9.frame_id = str[start:end]
        start = end
        end += 4
        (val1.leanTrackingState,) = _struct_i.unpack(str[start:end])
        _v11 = val1.lean
        _x = _v11
        start = end
        end += 16
        (_x.leanX, _x.leanY,) = _struct_2d.unpack(str[start:end])
        _x = val1
        start = end
        end += 31
        (_x.isRestricted, _x.isTracked, _x.trackingId, _x.clippedEdges, _x.engaged, _x.handRightConfidence, _x.handRightState, _x.handLeftConfidence, _x.handLeftState,) = _struct_2BQiBfifi.unpack(str[start:end])
        val1.isRestricted = bool(val1.isRestricted)
        val1.isTracked = bool(val1.isTracked)
        val1.engaged = bool(val1.engaged)
        _v12 = val1.appearance
        start = end
        end += 1
        (_v12.wearingGlasses,) = _struct_B.unpack(str[start:end])
        _v12.wearingGlasses = bool(_v12.wearingGlasses)
        _v13 = val1.activities
        _x = _v13
        start = end
        end += 5
        (_x.eyeLeftClosed, _x.eyeRightClosed, _x.mouthOpen, _x.mouthMoved, _x.lookingAway,) = _struct_5B.unpack(str[start:end])
        _v13.eyeLeftClosed = bool(_v13.eyeLeftClosed)
        _v13.eyeRightClosed = bool(_v13.eyeRightClosed)
        _v13.mouthOpen = bool(_v13.mouthOpen)
        _v13.mouthMoved = bool(_v13.mouthMoved)
        _v13.lookingAway = bool(_v13.lookingAway)
        _v14 = val1.expressions
        _x = _v14
        start = end
        end += 2
        (_x.neutral, _x.happy,) = _struct_2B.unpack(str[start:end])
        _v14.neutral = bool(_v14.neutral)
        _v14.happy = bool(_v14.happy)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.jointOrientations = []
        for i in range(0, length):
          val2 = k2_client.msg.JointOrientationAndType()
          _v15 = val2.orientation
          _x = _v15
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (val2.jointType,) = _struct_i.unpack(str[start:end])
          val1.jointOrientations.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.jointPositions = []
        for i in range(0, length):
          val2 = k2_client.msg.JointPositionAndState()
          start = end
          end += 1
          (val2.trackingState,) = _struct_B.unpack(str[start:end])
          val2.trackingState = bool(val2.trackingState)
          _v16 = val2.position
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          start = end
          end += 4
          (val2.jointType,) = _struct_i.unpack(str[start:end])
          val1.jointPositions.append(val2)
        self.bodies.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.bodies)
      buff.write(_struct_I.pack(length))
      for val1 in self.bodies:
        _v17 = val1.header
        buff.write(_struct_I.pack(_v17.seq))
        _v18 = _v17.stamp
        _x = _v18
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v17.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.leanTrackingState))
        _v19 = val1.lean
        _x = _v19
        buff.write(_struct_2d.pack(_x.leanX, _x.leanY))
        _x = val1
        buff.write(_struct_2BQiBfifi.pack(_x.isRestricted, _x.isTracked, _x.trackingId, _x.clippedEdges, _x.engaged, _x.handRightConfidence, _x.handRightState, _x.handLeftConfidence, _x.handLeftState))
        _v20 = val1.appearance
        buff.write(_struct_B.pack(_v20.wearingGlasses))
        _v21 = val1.activities
        _x = _v21
        buff.write(_struct_5B.pack(_x.eyeLeftClosed, _x.eyeRightClosed, _x.mouthOpen, _x.mouthMoved, _x.lookingAway))
        _v22 = val1.expressions
        _x = _v22
        buff.write(_struct_2B.pack(_x.neutral, _x.happy))
        length = len(val1.jointOrientations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.jointOrientations:
          _v23 = val2.orientation
          _x = _v23
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_i.pack(val2.jointType))
        length = len(val1.jointPositions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.jointPositions:
          buff.write(_struct_B.pack(val2.trackingState))
          _v24 = val2.position
          _x = _v24
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          buff.write(_struct_i.pack(val2.jointType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.bodies is None:
        self.bodies = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bodies = []
      for i in range(0, length):
        val1 = k2_client.msg.Body()
        _v25 = val1.header
        start = end
        end += 4
        (_v25.seq,) = _struct_I.unpack(str[start:end])
        _v26 = _v25.stamp
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v25.frame_id = str[start:end].decode('utf-8')
        else:
          _v25.frame_id = str[start:end]
        start = end
        end += 4
        (val1.leanTrackingState,) = _struct_i.unpack(str[start:end])
        _v27 = val1.lean
        _x = _v27
        start = end
        end += 16
        (_x.leanX, _x.leanY,) = _struct_2d.unpack(str[start:end])
        _x = val1
        start = end
        end += 31
        (_x.isRestricted, _x.isTracked, _x.trackingId, _x.clippedEdges, _x.engaged, _x.handRightConfidence, _x.handRightState, _x.handLeftConfidence, _x.handLeftState,) = _struct_2BQiBfifi.unpack(str[start:end])
        val1.isRestricted = bool(val1.isRestricted)
        val1.isTracked = bool(val1.isTracked)
        val1.engaged = bool(val1.engaged)
        _v28 = val1.appearance
        start = end
        end += 1
        (_v28.wearingGlasses,) = _struct_B.unpack(str[start:end])
        _v28.wearingGlasses = bool(_v28.wearingGlasses)
        _v29 = val1.activities
        _x = _v29
        start = end
        end += 5
        (_x.eyeLeftClosed, _x.eyeRightClosed, _x.mouthOpen, _x.mouthMoved, _x.lookingAway,) = _struct_5B.unpack(str[start:end])
        _v29.eyeLeftClosed = bool(_v29.eyeLeftClosed)
        _v29.eyeRightClosed = bool(_v29.eyeRightClosed)
        _v29.mouthOpen = bool(_v29.mouthOpen)
        _v29.mouthMoved = bool(_v29.mouthMoved)
        _v29.lookingAway = bool(_v29.lookingAway)
        _v30 = val1.expressions
        _x = _v30
        start = end
        end += 2
        (_x.neutral, _x.happy,) = _struct_2B.unpack(str[start:end])
        _v30.neutral = bool(_v30.neutral)
        _v30.happy = bool(_v30.happy)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.jointOrientations = []
        for i in range(0, length):
          val2 = k2_client.msg.JointOrientationAndType()
          _v31 = val2.orientation
          _x = _v31
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (val2.jointType,) = _struct_i.unpack(str[start:end])
          val1.jointOrientations.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.jointPositions = []
        for i in range(0, length):
          val2 = k2_client.msg.JointPositionAndState()
          start = end
          end += 1
          (val2.trackingState,) = _struct_B.unpack(str[start:end])
          val2.trackingState = bool(val2.trackingState)
          _v32 = val2.position
          _x = _v32
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          start = end
          end += 4
          (val2.jointType,) = _struct_i.unpack(str[start:end])
          val1.jointPositions.append(val2)
        self.bodies.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_2BQiBfifi = struct.Struct("<2BQiBfifi")
_struct_2d = struct.Struct("<2d")
_struct_i = struct.Struct("<i")
_struct_2B = struct.Struct("<2B")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
_struct_2I = struct.Struct("<2I")
_struct_5B = struct.Struct("<5B")
