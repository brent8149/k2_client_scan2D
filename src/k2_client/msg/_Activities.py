"""autogenerated by genpy from k2_client/Activities.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Activities(genpy.Message):
  _md5sum = "92fd995748ea10952cb2ee4d39fc8c66"
  _type = "k2_client/Activities"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool eyeLeftClosed
bool eyeRightClosed
bool mouthOpen
bool mouthMoved
bool lookingAway
"""
  __slots__ = ['eyeLeftClosed','eyeRightClosed','mouthOpen','mouthMoved','lookingAway']
  _slot_types = ['bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       eyeLeftClosed,eyeRightClosed,mouthOpen,mouthMoved,lookingAway

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Activities, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.eyeLeftClosed is None:
        self.eyeLeftClosed = False
      if self.eyeRightClosed is None:
        self.eyeRightClosed = False
      if self.mouthOpen is None:
        self.mouthOpen = False
      if self.mouthMoved is None:
        self.mouthMoved = False
      if self.lookingAway is None:
        self.lookingAway = False
    else:
      self.eyeLeftClosed = False
      self.eyeRightClosed = False
      self.mouthOpen = False
      self.mouthMoved = False
      self.lookingAway = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.eyeLeftClosed, _x.eyeRightClosed, _x.mouthOpen, _x.mouthMoved, _x.lookingAway))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.eyeLeftClosed, _x.eyeRightClosed, _x.mouthOpen, _x.mouthMoved, _x.lookingAway,) = _struct_5B.unpack(str[start:end])
      self.eyeLeftClosed = bool(self.eyeLeftClosed)
      self.eyeRightClosed = bool(self.eyeRightClosed)
      self.mouthOpen = bool(self.mouthOpen)
      self.mouthMoved = bool(self.mouthMoved)
      self.lookingAway = bool(self.lookingAway)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.eyeLeftClosed, _x.eyeRightClosed, _x.mouthOpen, _x.mouthMoved, _x.lookingAway))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.eyeLeftClosed, _x.eyeRightClosed, _x.mouthOpen, _x.mouthMoved, _x.lookingAway,) = _struct_5B.unpack(str[start:end])
      self.eyeLeftClosed = bool(self.eyeLeftClosed)
      self.eyeRightClosed = bool(self.eyeRightClosed)
      self.mouthOpen = bool(self.mouthOpen)
      self.mouthMoved = bool(self.mouthMoved)
      self.lookingAway = bool(self.lookingAway)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5B = struct.Struct("<5B")
